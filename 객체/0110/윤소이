<네임스페이스 코드>
#include <iostream>

namespace sy {
   double pi = 3.14;
   int r() {
      return 6;
   }
   double s() {
      return pi * r() * r();
   }
}
int main() {
   std::cout << "원의 넓이: " << sy::s() << std::endl;
   return 0;
}

<3장 질문>
위임 생성자와 타겟 생성자를 사용했을 때 장점은 무엇인가요?

<3장 정리>
캡슐화
정의: 객체를 캡슐로 싸서 그 내부를 보호하고 볼 수 없게 함
목적: 객체 내 데이터에 대한 보안, 보호, 외부 접근 제한

객체
구성: 멤버 변수(상태)와 멤버 함수(행동)로 구성됨

클래스
정의: 객체를 만들어내기 위해 정의된 설계도, 틀
구성: 멤버 변수와 멤버 함수로 구성, 클래스 선언부와 클래스 구현부로 구성됨
클래스 선언부: class 키워드 사용, 변수와 함수 선언
클래스 구현부: 클래스에 정의된 모든 멤버 함수 구현

생성자
정의: 객체가 생성되는 시점에서 자동으로 호출되는 멤버 함수(클래스 이름과 동일한 멤버 함수)
생성자 이름: 반드시 클래스 이름과 동일해야함
목적: 객체가 생성될 때 필요한 초기화를 위해
특징
- 리턴 타입을 선언하지 않음
- 객체 생성 시 오직 한 번만 호출
- 중복 가능
- 생성자를 선언 안 했을 경우 기본 생성자 자동 생성

위임 생성자: 타겟 생성자를 호출하는 생성자, 객체 초기화를 타겟 생성자에 위임
타겟 생성자: 객체 초기화를 전담하는 생성자
기본 생성자: 생성자가 없을 때 컴파일러가 대신 삽입해주는 생성자
특징
- 매개 변수 없는 생성자

소멸자
정의: 객체가 소멸되는 시점에서 자동으로 호출되는 함수
목적: 객체가 사라질 때 마무리 작업을 위함
구성: 클래스 이름 앞에 ~를 붙이면 소멸자 함수 이름이다.( Circle::~Circle(){...} )
특징
- 리턴 타입 없음
- 중복 불가능
- 소멸자가 없다면 자동으로 기본 소멸자 생성

객체 생성 순서
전역 객체: 선언된 순서로 생성
지역 객체: 함수가 호출된 순서대로 생성
객체 소멸 순서
전역 객체: 프로그램 종료 후 생성된 순서의 역순으로 소멸
지역 객체: 함수 종료 후 생성된 순서의 역순으로 소멸

인라인 함수
구성: inline키워드 사용
목적: C++ 프로그램의 실행 속도 향상
장점: 실행 시간이 빨라짐
단점: 컴파일된 전체 코드 크기 증가
자동 인라인 함수: 클래스 선언부에 구현된 멤버 함수

C++ 구조체
특징
- 상속, 멤버, 접근, 지정 등 모든 것이 클래스와 동일
- 구조체의 디폴트 접근 지정(public)
- 클래스의 디폴트 접근 지정(private)
장점: C언어와의 호환성
구조체 객체 생성: struct 키워드 생략
