하노이탑
하노이탑은 3개의 막대중에서 막대 하나에 쌓여 있는 n개의 원판을 다른쪽 막대로 옮기는 게임
규칙은
1. 한번에 하나의 원판만 이동
2.맨 위에 있는 원판만 이동
3.크기가 작은 원판위에 큰 원판을 쌓을수없다

왼쪽 막대부터 A B C 라 가정을 해보고 원판의 갯수를 n으로 지정한다

-------------------------------------------------------------------------------
n=1             (이동횟수=1)
일단 원반의 갯수가 1인경우  
A>C로 이동하면 끝이니 1회 이동하게 된다
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
n=2             (이동횟수=3)
원반이 2개일경우 (제일큰게 1 작을수록 2,3,4,~~)
A>B 2
A<C 1
B>C 2    이처럼 총 3번 이동하게 된다
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
n=3             (이동횟수=7)
3개일 경우 위 행위가 반복이 되는데

1️⃣A>B로 이동하게 되는 원반 갯수는2개 (2,3)
2️⃣A>C로 이동하게 되는 원반 갯수는1개 (1)
3️⃣B>C로 이동하게 되는 원반 갯수는 2개 (2,3)

1️⃣ A>B로 이동되는 갯수가 2개이니 이동하는 횟수는 3회가 된다 
A>C 1
A>B 2
C>B 1
이렇게 3회를 이동할경우
2️⃣처럼 가장 큰 원반을 C로 옮길수있다(이동횟수는1회) 
A,
3️⃣도 1️⃣과 같이 갯수가 2개이니 이동횟수는 3회
B>A 1
B>C 2
A>C 1
총 이동횟수는 7회입니다 
-------------------------------------------------------------------------------
이처럼 결국에는 원반갯수가 5개처럼 많아도
N-1개인 4개를 임시 막대(B)로 이동하고 A>B (2,3,4,5)
제일 큰 원반(1)을 A>C로 옮기고   A>C (1)
임시 막대(B)에 있는 N-1개인 4개의 원반을 B>C (2,3,4,5) 
이처럼 가장 큰 원반(1)을 제외한 원반들(n-1)은 무조건 임시 기둥(B)로 이동하고 큰 원반을 목적지(C)로 옮기고 임시기둥에 남은 원반들을 목적지(C)로 옮겨야합니다

원반의 이동횟수 규칙을
F(n) 이라한다면  F(n) = 1+ 2F(n-1)  이됩니다
1을 더하는 이유는 2️⃣ 처럼 결국 마지막에는 큰 원반을 A>C 로 옮기는 횟수)
2F(n-1)이 나온 이유는 n-1개를 임시막대로 한번 옮기고=F(n-1) 
  추가로 임시 막대에 있던 n-1개를 C로 옮기는 작업=F(n-1) 즉 똑같은 작업을 한번 더 해서 2F(n-1)이 나오게 된것

n=1
F(1)=1 =2^1-1
n=2
F(2)=3 =2^2-1

n=3
F(3) = 1+2F(2) = 1+ 2x3 = 7 = 2^3-1

n=4
F(4) = 1+2F(3) =1+ 2x7= 15= 2^4-1   (여기서 위에 F(3) 값은 7이란걸 알고있으니)

이처럼 F(n)=2^n-1 이란것을 알수있다

그럼 여기서 n=4 개일경우

➊A>B (2,3,4) 총 3개를 움직이니=F(3) 7번
➋A>C (1) 큰원반 1개를 움직인다=F(1)1번
➌B>C (2,3,4) 또 3개를 움직이니=F(3) 7번
총 15번

➊은 결국 n-1개를 시작(from)> 임시(tmp)      ❗❗❗❗❗❗
➌은 임시(tmp)>목표(to)                     ❗❗❗❗❗❗❗❗

원반이 3개일 경우를 보기 쉽게 코드느낌으로 만들어보면 

우선 하노이탑 선언      (from tmp to 영어 의미를 신경쓰면 안됨 계속해서 바뀌기에 to목적지가 임시거쳐가 될때도 있고 from 임시공간이 되기도 하기때문에 A B C에 집중할것)

int(main)
{
  hanoi(3,'A','B','C');      원반의 갯수 3개 ,막대는 3개이며 각각 a, b,c라고 부르기로 결정(여기서
  return 0;
}

void hanoi(int n, char from , char tmp , char to)                 hanoi(3,'A','B','C');를 위에서 선언했기에   from이 출발하는 기둥A| tmp가 거쳐가는 기둥 B | to가 목적지 기둥c 로 처음에 진행하게 된다
{
  If(n==1)             원반의 갯수가 1개일 경우에는
  printf("%c > %c",from,to);   from에서 to로 한번만 움직이면 되기에  1번 움직이고
  return;            명령어 마무리
}   만약에 1이 아닐경우에 여러번 움직여야하니 (예를 들면 F(2)일 경우 위에 if문 처럼 1번 움직이는게 아닌 3번 움직여야하니까)
else
{
hanoi(n-1,from,to,tmp)     <------ hanoi(2,A,C,B)
이처럼 선언하는 이유는 아까 위 1️⃣에서        A > B 로 이동한다 했으니 from에서 to(임시공간)를 거쳐 tmp로 도착하게 된다
printf(%c->%c,from,to)   from(시작)에서 to(임시공간)가는 과정 출력
hanoi(n-1,tmp,from,to)
3️⃣에서 봤듯 B > C 니까 tmp(시작)에서 from(임시공간)을 거쳐 to(목적지)로 가게된다


------------------------------------------------------------------------------------------------------
visual studio로 만들경우(원판4개)

#include <stdio.h>

void hanoi_tower(int n, char from, char tmp, char to)
{
	if (n == 1) printf("원판을 1을 %c 에서 %c으로 옮긴다.\n", from, to);
	else {
		hanoi_tower(n - 1, from, to, tmp);
		printf("원판 %d을 %c에서 %c으로 옮긴다.\n", n, from, to);
		hanoi_tower(n - 1, tmp, from, to);
	}
}
int main(void)
{
	hanoi_tower(4, 'A', 'B', 'C');
	return 0;
}


결과값
원판을 1을 A 에서 B으로 옮긴다.
원판 2을 A에서 C으로 옮긴다.
원판을 1을 B 에서 C으로 옮긴다.
원판 3을 A에서 B으로 옮긴다.
원판을 1을 C 에서 A으로 옮긴다.
원판 2을 C에서 B으로 옮긴다.
원판을 1을 A 에서 B으로 옮긴다.
원판 4을 A에서 C으로 옮긴다.
원판을 1을 B 에서 C으로 옮긴다.
원판 2을 B에서 A으로 옮긴다.
원판을 1을 C 에서 A으로 옮긴다.
원판 3을 B에서 C으로 옮긴다.
원판을 1을 A 에서 B으로 옮긴다.
원판 2을 A에서 C으로 옮긴다.
원판을 1을 B 에서 C으로 옮긴다.

https://pythontutor.com/render.html#mode=display 


